{"filter":false,"title":"lab1_3.py","tooltip":"/transport/Lab_1/lab1_3.py","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":5,"column":0},"end":{"row":6,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":6,"column":0},"end":{"row":7,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":5,"column":0},"end":{"row":177,"column":10},"action":"insert","lines":["import pymongo as pm  # import MongoClient only","import matplotlib","import pandas","import pprint","import numpy as np","import matplotlib.pyplot as plt","from datetime import date, datetime, timezone","client = pm.MongoClient('bigdatadb.polito.it', ssl=True,","                        authSource='carsharing', tlsAllowInvalidCertificates=True)","db = client['carsharing']","db.authenticate('ictts', 'Ictts16!')","Bookings_collection = db['PermanentBookings']","Parkings_collection = db['PermanentParkings']","","startUnixTime_datetime = (datetime(2017, 11, 1, tzinfo=timezone.utc))","startUnixTime = startUnixTime_datetime.timestamp()","endUnixTime_datetime = (datetime(2017, 12, 1, tzinfo=timezone.utc))","endUnixTime = endUnixTime_datetime.timestamp()","","resB = Bookings_collection.aggregate([{","                \"$match\":","                    {","                        \"city\": \"Torino\", #\"New York City\", #\"Madrid\",","                        \"init_time\": {","                                        \"$gte\": startUnixTime,","                                        \"$lte\": endUnixTime","                                     },","                    }","            },","            {","                \"$project\":","                    { # init_time, hour, if moved, duration","                        \"_id\": 0,","                        \"init_time\" : 1,","                        #\"hour\": {\"$floor\": {\"$divide\": [\"$init_time\", 3600]}},","                        \"hourDay\": {","                                    \"$hour\": \"$init_date\"","                        },","                        \"dayMonth\": {","                                    \"$dayOfMonth\": \"$init_date\"","                        },","                        \"moved\": {","                                    \"$ne\": [","                                                {\"$arrayElemAt\": [\"$origin_destination.coordinates\", 0]},","                                                {\"$arrayElemAt\": [\"$origin_destination.coordinates\", 1]}","                                            ]","                                },","                        \"duration\": {","                                        \"$ceil\": {","                                                    \"$divide\": [","                                                                {\"$subtract\": [\"$final_time\", \"$init_time\"]},","                                                                60","                                                                ]","                                                 }","                                    }","                    }","            },","            {","                \"$match\": {","                            \"moved\": True,","                            \"duration\": { #duration higher than 3 minutes but lower than 180","                                            \"$gte\": 3,","                                            \"$lte\": 180","                                        }","                          }","            },","            {","                \"$group\":","                    {","                        \"_id\": {\"day\": \"$dayMonth\", \"hour\": \"$hourDay\"},","                        \"count\": {\"$sum\": 1}","                    }","            },","            {","                \"$sort\":","                        {","                            \"_id.day\":1,","                            \"_id.hour\": 1","                        }","            }","           ])","","listB = list(resB)","perDaysB = {}","for item in listB:","    day = item[\"_id\"][\"day\"]","    if (day == 1 and day not in perDaysB.keys()) or day ==  list(perDaysB.keys())[len(perDaysB.keys())-1]+1:","        perDaysB[day] = [0]*24","    else:","        while day != list(perDaysB.keys())[len(perDaysB.keys())-1]:","            perDaysB[list(perDaysB.keys())[len(perDaysB.keys())-1]+1] = [0]*24","    hour = item[\"_id\"][\"hour\"]","    perDaysB[day][hour] = item['count']","","# Parkings","resP = Parkings_collection.aggregate([{","                \"$match\":","                    {","                        \"city\": \"Torino\", #\"New York City\", #\"Madrid\",","                        \"init_time\": {","                                        \"$gte\": startUnixTime,","                                        \"$lte\": endUnixTime","                                     },","                    }","            },","            {","                \"$project\":","                    { # init_time, hour, if moved, duration","                        \"_id\": 0,","                        \"init_time\" : 1,","                        #\"hour\": {\"$floor\": {\"$divide\": [\"$init_time\", 3600]}},","                        \"hourDay\": {","                                    \"$hour\": \"$init_date\"","                        },","                        \"dayMonth\": {","                                    \"$dayOfMonth\": \"$init_date\"","                        },","                        \"duration\": {","                                        \"$ceil\": {","                                                    \"$divide\": [","                                                                {\"$subtract\": [\"$final_time\", \"$init_time\"]},","                                                                60","                                                                ]","                                                 }","                                    }","                    }","            },","            {","                \"$match\": {","                            \"duration\": { #duration higher than 3 minutes but lower than 180","                                            \"$gte\": 2","                                        }","                          }","            },","            {","                \"$group\":","                    {","                        \"_id\": {\"day\": \"$dayMonth\", \"hour\": \"$hourDay\"},","                        \"count\": {\"$sum\": 1}","                    }","            },","            {","                \"$sort\":","                        {","                            \"_id.day\":1,","                            \"_id.hour\": 1","                        }","            }","           ])","","listP = list(resP)","perDaysP = {}","for item in listP:","    day = item[\"_id\"][\"day\"]","    if (day == 1 and day not in perDaysP.keys()) or day ==  list(perDaysP.keys())[len(perDaysP.keys())-1]+1:","        perDaysP[day] = [0]*24","    else:","        while day != list(perDaysP.keys())[len(perDaysP.keys())-1]:","            perDaysP[list(perDaysP.keys())[len(perDaysP.keys())-1]+1] = [0]*24","    hour = item[\"_id\"][\"hour\"]","    perDaysP[day][hour] = item['count']","","fig = plt.figure(1, figsize=(20, 10))","plt.xticks(np.arange(1, len(sum(perDaysB.values(),[])), 24), np.arange(1,31), fontsize=8)","plt.grid(True, which='both')","plt.plot(sum(perDaysB.values(),[]), label='Booked cars')","plt.plot(sum(perDaysP.values(),[]), label='Parked cars')","plt.xlabel('Day of November')","plt.ylabel('Number of booked/parked cars')","plt.title('Booked and parked cars per hour during November in Turin')","plt.legend()","plt.savefig('BookedParkedCarsTorinoNov.png')","plt.show()"],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["# ho provato a plottare i dati di Ottobre a Torino ed il grafico è identico a quello presente nel report del gruppo 5","# quindi suppongo che il codice (per quanto non furbo) funzioni","# PERO' usando i dati di Novembre ottengo un grafico con notevoli problemi durante i primi 12 giorni, in tutte le città...","# effettivamente ho provato a fare una query su Mongo e non risultano esserci prenotazioni dal 2/11 al 12/11",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"remove","lines":["",""],"id":5}],[{"start":{"row":174,"column":0},"end":{"row":478,"column":21},"action":"remove","lines":["","import pymongo as pm  # import MongoClient only","import matplotlib","import pandas","import pprint","import numpy as np","import matplotlib.pyplot as plt","from datetime import date, datetime, timezone","client = pm.MongoClient('bigdatadb.polito.it', ssl=True,","                        authSource='carsharing', tlsAllowInvalidCertificates=True)","db = client['carsharing']  # Choose the DB to use","# , mechanism='MONGODB-CR') #authentication","db.authenticate('ictts', 'Ictts16!')","Bookings_collection = db['PermanentBookings']  # Collection for Car2go to use","Parkings_collection = db['PermanentParkings']","","startUnixTime_datetime = (datetime(2017, 10, 1, tzinfo=timezone.utc))","startUnixTime = startUnixTime_datetime.timestamp()","endUnixTime_datetime = (datetime(2017, 10, 31, tzinfo=timezone.utc))","endUnixTime = endUnixTime_datetime.timestamp()","#print(startUnixTime, endUnixTime, endUnixTime-startUnixTime)","# 1 mese = 2592000.0 / 31 giorni / 24 ore = 3483.87","","# for day in range(1,31):","#     startUnixTime_datetime = (datetime(2017, 10, day, tzinfo=timezone.utc))","#     startUnixTime = startUnixTime_datetime.timestamp()","#     if day == 30:","#         endUnixTime_datetime = (datetime(2017, 12, 1, tzinfo=timezone.utc))","#         endUnixTime = endUnixTime_datetime.timestamp()","#     else:","#         #endUnixTime_datetime = (datetime(2017, 10, day+1, tzinfo=timezone.utc))","#         endUnixTime = startUnixTime+86400","","    #endUnixTime = endUnixTime_datetime.timestamp()","    # difference of 86400 between the timestamps of two consecutive days","","resB = Bookings_collection.aggregate([{","                \"$match\":","                    {","                        \"city\": \"Torino\", #\"New York City\", #\"Madrid\",","                        \"init_time\": {","                                        \"$gte\": startUnixTime,","                                        \"$lte\": endUnixTime","                                     },","                        # \"final_time\": {","                        #                 \"$gte\": startUnixTime,","                        #                 \"$lte\": endUnixTime","                        #               }","                    }","            },","            {","                \"$project\":","                    { # extract position, time, duration","                        \"_id\": 0,","                        \"init_time\" : 1,","                        \"moved\": {","                                    \"$ne\": [","                                                {\"$arrayElemAt\": [\"$origin_destination.coordinates\", 0]},","                                                {\"$arrayElemAt\": [\"$origin_destination.coordinates\", 1]}","                                            ]","                                },","                        \"duration\": {","                                        \"$divide\": [","                                                    {\"$subtract\": [\"$final_time\", \"$init_time\"]},","                                                    60","                                                    ]","                                    }","                    }","            },","            {","                \"$match\": {","                            \"moved\": True,","                            \"duration\": { #duration higher than 3 minutes but lower than 180","                                            \"$gte\": 3,","                                            \"$lte\": 180","                                        }","                          }","            },","            {","                \"$group\":","                    {","                        \"_id\": {\"init_time\": \"$init_time\", \"duration\":\"$duration\"},","                        \"count\": {\"$sum\": 1}","                    }","            },","            {","                \"$sort\":","                        {","                            \"_id\": 1","                        }","            }","           ])","","perDaysB = []","durationDaysB = []","for i in range(0,30):","    perDaysB.append([0]*24)","    durationDaysB.append([])","","listB = list(resB)","prev = startUnixTime","day = 0","","for x in listB:","    time = x['_id']['init_time']","    if time - prev < 86400:","        sec = (time - prev) % (24 * 3600)","        hour = int(np.floor(sec // 3600))","        sec %= 3600","        min = sec // 60","        sec %= 60","        #seconds = int(np.floor((time-prev)/24)) #conto le ore -> ottengo in secondi","        #hour = datetime.timedelta(seconds=seconds)","    else:","        prev += 86400","        day += 1","        #seconds = int(np.floor((time - prev) / 24))  # conto le ore -> ottengo in secondi","        #hour = datetime.timedelta(seconds=seconds)","        sec = (time - prev) % (24 * 3600)","        hour = int(np.floor(sec // 3600))","        sec %= 3600","        min = sec // 60","        sec %= 60","    #print(\"hour\",hour)","    #print(\"day\",day)","    perDaysB[day][hour] += x['count']","    durationDaysB[day].append(x['_id']['duration'])","","finalB =  []","avgDaysB = []","medianDaysB = []","stdvDaysB = []","percentileDaysB = []","for x in perDaysB:","    finalB.extend(x)","","for x in durationDaysB:","    if len(x) > 0:","        avgDaysB.append(np.mean(x))","        medianDaysB.append(np.median(x))","        stdvDaysB.append(np.std(x))","        percentileDaysB.append(np.percentile(x,90))","#print(avgDaysB,medianDaysB,stdvDaysB,percentileDaysB)","","resP = Parkings_collection.aggregate([{","                \"$match\":","                    {","                        \"city\": \"Torino\", #\"New York City\", #\"Madrid\",","                        \"init_time\": {","                                        \"$gte\": startUnixTime,","                                        \"$lte\": endUnixTime","                                     },","                        # \"final_time\": {","                        #                 \"$gte\": startUnixTime,","                        #                 \"$lte\": endUnixTime","                        #               }","                    }","            },","            {","                \"$project\":","                    { # extract position, time, duration","                        \"_id\": 0,","                        \"init_time\" : 1,","                        \"duration\": {","                                        \"$divide\": [","                                                    {\"$subtract\": [\"$final_time\", \"$init_time\"]},","                                                    60","                                                    ]","                                    }","                    }","            },","            {","                \"$match\": {","                            \"duration\": {","                                            \"$gte\": 2","                                        }","                          }","            },","            {","                \"$group\":","                    {","                        \"_id\": {\"init_time\": \"$init_time\", \"duration\":\"$duration\"},","                        \"count\": {\"$sum\": 1}","                    }","            },","            {","                \"$sort\":","                        {","                            \"_id\": 1","                        }","            }","           ])","listP = list(resP)","#print(listP[0])","perDaysP = []","durationDaysP = []","for i in range(0,30):","    perDaysP.append([0]*24)","    durationDaysP.append([])","#print(perDays)","","prev = startUnixTime","day = 0","problems = []","probl = []","for x in listP:","    time = x['_id']['init_time']","    if time - prev < 86400:","        sec = (time - prev) % (24 * 3600)","        hour = int(np.floor(sec // 3600))","        sec %= 3600","        min = sec // 60","        sec %= 60","        #seconds = int(np.floor((time-prev)/24)) #conto le ore -> ottengo in secondi","        #hour = datetime.timedelta(seconds=seconds)","    else:","        prev += 86400","        day += 1","        #seconds = int(np.floor((time - prev) / 24))  # conto le ore -> ottengo in secondi","        #hour = datetime.timedelta(seconds=seconds)","        sec = (time - prev) % (24 * 3600)","        hour = int(np.floor(sec // 3600))","        sec %= 3600","        min = sec // 60","        sec %= 60","    #print(\"hour\",hour)","    #print(\"day\",day)","    if x['count'] == 0:","        probl.append(day)","    perDaysP[day][hour] += x['count']","    durationDaysP[day].append(x['_id']['duration'])","","finalP =  []","avgDaysP = []","medianDaysP = []","stdvDaysP = []","percentileDaysP = []","counter = -1","for x in perDaysP:","    counter += 1","    if 0 in x:","        problems.append(counter)","    finalP.extend(x)","","#print(\"len(durationDaysP)\", len(durationDaysP))","for x in durationDaysP:","    if len(x) > 0:","        avgDaysP.append(np.mean(x))","        medianDaysP.append(np.median(x))","        stdvDaysP.append(np.std(x))","        percentileDaysP.append(np.percentile(x,90))","print(problems)","","plt.xticks(np.arange(1, 720, 24), np.arange(1,31), fontsize=8)","plt.plot(finalB, label='Booked', color='blue')","plt.plot(finalP, label='Parked', color='orange')","plt.title('Number of booked and parked cars per hour during November')","plt.ylabel('Number of booked and parked cars')","plt.xlabel('Date')","plt.legend()","plt.grid(True)","plt.savefig('booked_parked_cars_Torino_October.png')","plt.show()","#[[nbook_ore0,nbook_ore1.nbook_ore2]] giorno1,[],[]","","#plt.figure(figsize=(20,10))","plt.xticks(np.arange(1, 31, 1), np.arange(1,31), fontsize=8)","#plt.yticks(range(100), np.arange(100), fontsize=8)","plt.plot(avgDaysB, label='Average', color='blue')","plt.plot(medianDaysB, label='Median', color='orange')","plt.plot(stdvDaysB, label='Standard Deviation', color='green')","plt.plot(percentileDaysB, label='90th percentile', color='red')","plt.title('Average, median, standard deviation, 90th percentile \\n of the duration of the bookings \\n per day during November')","plt.ylabel('Avg, median, stdv, 90th percentile')","plt.xlabel('Date')","plt.grid(True)","plt.legend()","plt.savefig('statistics_To_booked_October.png')","plt.show()","","#plt.figure(figsize=(20,10))","plt.xticks(np.arange(1, 31, 1), np.arange(1,31), fontsize=8)","#plt.yticks(np.arange(1, 101, step=10))","plt.plot(avgDaysP, label='Average', color='blue')","plt.plot(medianDaysP, label='Median', color='orange')","plt.plot(stdvDaysP, label='Standard Deviation', color='green')","plt.plot(percentileDaysP, label='90th percentile', color='red')","plt.title('Average, median, standard deviation, 90th percentile \\n of the duration of the parkings \\n per day during November')","plt.ylabel('Avg, median, stdv, 90th percentile')","plt.xlabel('Date')","plt.grid(True)","plt.legend()","plt.savefig('statistics_To_parked_October.png')","plt.show()","","#print(durata)","#print(count)","#plt.title('CDF bookings duration in  during November 2017')","#plt.ylabel('CDF')","#plt.xlabel('Duration [minutes]')","#plt.plot(durata, count)","#plt.savefig('CDF_filtered_.png')","#plt.show()","","#tentativo 7/11 00:34"],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":167,"column":29},"end":{"row":167,"column":29},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1604917865378,"hash":"47f4f83bd968b06c6f50cfd600d5f35d0255905b"}